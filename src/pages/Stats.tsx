import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Flame, Target, Calendar, Award } from "lucide-react";
import Navigation from "@/components/Navigation";
import { useCounter } from "@/hooks/useCounter";
import { loadStreakData } from "@/lib/streakSupabase";
import { StreakData } from "@/lib/streak";
import { getStreakStatusMessage, getStreakEmoji } from "@/lib/streak";
import ShareStreakButton from "@/components/ShareStreakButton";
import ProgressCalendar from "@/components/ProgressCalendar";

const Stats = () => {
  const { counter, loading } = useCounter();
  const [streakData, setStreakData] = useState<StreakData | null>(null);
  const [streakLoading, setStreakLoading] = useState(true);

  useEffect(() => {
    loadStreakDataFromDB();
  }, []);

  // Ensure page opens at top (consistent behavior)
  useEffect(() => {
    try { window.scrollTo({ top: 0, behavior: 'auto' }); } catch {}
  }, []);

  const loadStreakDataFromDB = async () => {
    try {
      const data = await loadStreakData();
      setStreakData(data);
    } catch (error) {
      console.error('Error loading streak data:', error);
    } finally {
      setStreakLoading(false);
    }
  };

  const totalMalas = Math.floor(counter.count / 108);
  const todayMalas = Math.floor(counter.today_count / 108);
  const progressToday = Math.min(((counter.today_count % 108) / 108) * 100, 100);

  if (loading || streakLoading) {
    return (
      <div className="min-h-screen gradient-peaceful flex items-center justify-center">
        <p className="text-muted-foreground">Loading stats...</p>
      </div>
    );
  }

  return (
    <div className="min-h-screen gradient-peaceful pb-20">
      <header className="border-b border-border/50 backdrop-blur-sm bg-background/50">
        <div className="container mx-auto px-4 py-4">
          <div>
            <h1 className="text-2xl font-bold text-primary">ЁЯМ╕ Jap Yatra тАФ рд╣рд░ рджрд┐рди, рд╣рд░ рдорд╛рд▓рд╛, рдПрдХ рдЕрдиреБрднрд╡</h1>
          </div>
        </div>
      </header>

      <main className="container mx-auto px-4 py-8 space-y-6">
        {/* Today's Progress */}
        <Card className="shadow-soft border-border/50">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Target className="h-5 w-5 text-primary" />
              Today's Progress
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">Current Mala</span>
                <span className="font-medium">{counter.today_count % 108} / 108</span>
              </div>
              <div className="h-3 bg-secondary rounded-full overflow-hidden">
                <div 
                  className="h-full gradient-divine transition-all duration-300"
                  style={{ width: `${progressToday}%` }}
                />
              </div>
            </div>
            <div className="grid grid-cols-2 gap-4 pt-2">
              <div>
                <p className="text-xs text-muted-foreground">Total Jap Today</p>
                <p className="text-3xl font-bold text-primary">{counter.today_count}</p>
              </div>
              <div>
                <p className="text-xs text-muted-foreground">Malas Completed</p>
                <p className="text-3xl font-bold">{todayMalas}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Streak Card */}
        <Card className="shadow-soft border-border/50 gradient-golden">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-white">
              <Flame className="h-5 w-5" />
              Current Streak
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-center">
              <p className="text-6xl font-bold text-white mb-2">
                {streakData?.current_streak || 0}
              </p>
              <p className="text-white/90">consecutive days</p>
              {streakData?.longest_streak && streakData.longest_streak > 0 && (
                <p className="text-white/70 text-sm mt-2">
                  Best: {streakData.longest_streak} days
                </p>
              )}
              <p className="text-white/80 text-xs mt-3">
                {getStreakStatusMessage(streakData?.current_streak || 0)}
              </p>
              
              {/* Share Streak Button */}
              <div className="mt-6">
                <ShareStreakButton
                  currentStreak={streakData?.current_streak || 0}
                  longestStreak={streakData?.longest_streak || 0}
                  totalMalas={streakData?.total_malas || totalMalas}
                />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* All Time Stats */}
        <div className="grid grid-cols-2 gap-4">
          <Card className="shadow-soft border-border/50">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Malas</CardTitle>
              <Calendar className="h-4 w-4 text-primary" />
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold">{streakData?.total_malas || totalMalas}</div>
              <p className="text-xs text-muted-foreground mt-1">
                {counter.count.toLocaleString()} total Jap
              </p>
            </CardContent>
          </Card>

          <Card className="shadow-soft border-border/50">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Dedication</CardTitle>
              <Award className="h-4 w-4 text-primary" />
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold text-primary">
                {getStreakEmoji(streakData?.current_streak || 0)}
              </div>
              <p className="text-xs text-muted-foreground mt-1">
                {getDailyDedicationQuote()}
              </p>
            </CardContent>
          </Card>
        </div>

        {/* Progress Calendar */}
        <ProgressCalendar />

        {/* Motivational Quote (Hindi, rotates daily) */}
        <Card className="shadow-soft border-border/50 bg-primary/5">
          <CardContent className="pt-6">
            <p className="text-center text-sm text-muted-foreground italic">
              {getDailyFooterQuote()}
            </p>
          </CardContent>
        </Card>
      </main>

      <Navigation />
    </div>
  );
};

export default Stats;

// Returns a daily-rotating Hindi quote for footer
function getDailyFooterQuote(): string {
  const quotes = [
    'рд╣рд░ рдорд╛рд▓рд╛ рдПрдХ рдХрджрдо рд╣реИ рд╕реНрд╡рдпрдВ-рд╕реНрд╡рд░реВрдк рдкрд░рдорд╛рддреНрдорд╛ рдХреА рдУрд░ред',
    'рдЬрдк рдХрд░рддреЗ рд╕рдордп рдорд╛рд▓рд╛ рдирд╣реАрдВ, рдорди рд╕реНрдерд┐рд░ рд╣реЛ тАФ рддрдм рд╣реА рдореБрдХреНрддрд┐ рдЖрддреА рд╣реИред',
    'рдирд┐рд░рдВрддрд░ рдЬрдк рд╕реЗ рдорди рд╣рд▓реНрдХрд╛ рд╣реЛрддрд╛ рд╣реИ, рдмрдВрдзрди рдЯреВрдЯрддреЗ рд╣реИрдВред',
    'рдЬрд╣рд╛рдВ рд╡рд╛рдгреА рд╢рд╛рдВрдд рд╣реЛ, рд╡рд╣реАрдВ рдзреНрдпрд╛рди рдЧрд╣рд░рд╛ рд╣реЛ рдЬрд╛рддрд╛ рд╣реИред',
    'рдЬрдк рдХреА рд╣рд░ рдорд╛рд▓рд╛ рднреАрддрд░ рдХреА рдЖрдЧ рдХреЛ рд╢рд╛рдВрдд рдХрд░рддреА рд╣реИред',
    'рдПрдХ рдорд╛рд▓рд╛ рдореЗрдВ рд╕реМ рдЬрдк рдирд╣реАрдВ, рдмрд▓реНрдХрд┐ рдПрдХ рдирдореНрд░ рд╣реЛ рдЖрддреНрдо-рд╕рдорд░реНрдкрдг рд╣реЛрддрд╛ рд╣реИред',
    'рдЬрдм рдорд╛рд▓рд╛ рдкрд░ рд╣рд░ рдмреАрдЬ рдШреВрд░реЗ, рдмреАрдЬ рдирд╣реАрдВ рдмрд▓реНрдХрд┐ рд╡рд┐рд╢реНрд╡рд╛рд╕ рдмрдврд╝рддрд╛ рд╣реИред',
    'рдорд╛рд▓рд╛ рдЙрдард╛рдиреЗ рд╡рд╛рд▓реЛрдВ рдХрд╛ рдорди рд╕реНрд╡рдЪреНрдЫ рд╣реЛрддрд╛ рд╣реИ, рдФрд░ рдЖрддреНрдорд╛ рдЙрд╕ рддреЗрдЬрд╝ рд╕реЗ рдЪрдордХрддреА рд╣реИред',
    'рдЬрдк рдХреА рд╢рдХреНрддрд┐ рдЪреБрдкреНрдкреА рдореЗрдВ рдкреНрд░рдХрдЯ рд╣реЛрддреА рд╣реИ, рдФрд░ рдЪреБрдкреНрдкреА рдореЗрдВ рдкреНрд░рднреБ рдкреНрд░рдХрдЯ рд╣реЛрддреЗ рд╣реИрдВред',
    'рдорд╛рд▓рд╛ рдХреЗ рд╣рд░ рдмреАрдЬ рдХреЗ рд╕рд╛рде рдкреВрд░реНрд╡ рдХрд░реНрдореЛрдВ рдХрд╛ рдмреЛрдЭ рд╣рд▓реНрдХрд╛ рд╣реЛрддрд╛ рдЬрд╛рддрд╛ рд╣реИред',
    'рдорд╛рд▓рд╛ рдХреА рдЧрд┐рдирддреА рдирд╣реАрдВ, Intent (рдЗрдЪреНрдЫрд╛) рдорд╛рдпрдиреЗ рд░рдЦрддреА рд╣реИред',
    'рд╣рд░ рджрд┐рди рдХреА рдорд╛рд▓рд╛, рд╣рд░ рджрд┐рди рдХрд╛ рд╕рдВрдХрд▓реНрдк тАФ рдпрд╣реА рд╕рд╛рдзрдирд╛ рдХреА рдиреАрдВрд╡ рд╣реИред',
    'рдорд╛рд▓рд╛ рдХреЛ рд╕рд╛рдзрдирд╛ рдХреА рд╕рд░реНрдкреА рдмрдирд╛рдУ, рдЬрдк рдЙрд╕реЗ рдкреЛрд╖рдг рджреЗред',
    'рдЬрдм рдорди рд╡рд┐рдЪрд▓рд┐рдд рд╣реЛ, рдорд╛рд▓рд╛ рдХреЛ рдкрдХрдбрд╝реЛ тАФ рд╣рд░ рдмреАрдЬ рд╢рд╛рдВрддрд┐ рдХреА рдПрдХ рдкреБрдХрд╛рд░ рд╣реИред',
    'рдорд╛рд▓рд╛ рдирд╣реАрдВ рдЫреЛрдбрд╝реЛ, рдХреНрдпреЛрдВрдХрд┐ рд╣рд░ рдкреБрдирд░рд╛рд╡реГрддреНрддрд┐ рдореЗрдВ рдЖрддреНрдорд╛ рдЧрд╣рд░реА рд╣реЛрддреА рд╣реИред',
  ];
  const now = new Date();
  const start = new Date(now.getFullYear(), 0, 0);
  const dayOfYear = Math.floor((+now - +start) / (1000 * 60 * 60 * 24));
  return `тАЬ${quotes[dayOfYear % quotes.length]}тАЭ`;
}

// Rotating Hindi quotes for dedication mindset (daily)
function getDailyDedicationQuote(): string {
  const quotes = [
    'рд╣рд░ рдЬрдк рддреБрдореНрд╣реЗрдВ рднреАрддрд░ рдХреА рд╢рд╛рдВрддрд┐ рдХреЗ рдФрд░ рдкрд╛рд╕ рд▓рд╛рддрд╛ рд╣реИред',
    'рдиреАрдВрд╡ рдордЬрд╝рдмреВрдд рд╣реЛ рддреЛ рдЗрдорд╛рд░рдд рдЦреБрдж рдмреЛрд▓рддреА рд╣реИ тАФ рдЬрдк рд╡рд╣реА рдиреАрдВрд╡ рд╣реИред',
    'рдЦрд╝рд╛рдореЛрд╢реА рдореЗрдВ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдЬрдк рд╕рдмрд╕реЗ рдКрдБрдЪреА рдкреБрдХрд╛рд░ рд╣реИред',
    'рдЬрд╣рд╛рдБ рдорди рдбрдЧрдордЧрд╛рдП, рд╡рд╣рд╛рдБ рдорд╛рд▓рд╛ рд╕рдВрднрд╛рд▓ рд▓реЗред',
    'рдЬрд┐рддрдирд╛ рдЬрдк, рдЙрддрдирд╛ рдкреНрд░рдХрд╛рд╢ред',
  ];
  const now = new Date();
  const start = new Date(now.getFullYear(), 0, 0);
  const dayOfYear = Math.floor((+now - +start) / (1000 * 60 * 60 * 24));
  return quotes[dayOfYear % quotes.length];
}
